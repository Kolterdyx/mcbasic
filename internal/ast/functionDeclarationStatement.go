package ast

import (
	"github.com/Kolterdyx/mcbasic/internal/interfaces"
	"github.com/Kolterdyx/mcbasic/internal/tokens"
	"github.com/Kolterdyx/mcbasic/internal/types"
)

type FunctionDeclarationStmt struct {
	Name          tokens.Token
	Parameters    []VariableDeclarationStmt
	Body          BlockStmt
	ReturnType    types.ValueType
	Autogenerated bool
}

func (f FunctionDeclarationStmt) Accept(visitor StatementVisitor) any {
	return visitor.VisitFunctionDeclaration(f)
}

func (f FunctionDeclarationStmt) Type() NodeType {
	return FunctionDeclarationStatement
}

func (f FunctionDeclarationStmt) HasArg(arg string) bool {
	for _, p := range f.Parameters {
		if p.Name.Lexeme == arg {
			return true
		}
	}
	return false
}

func (f FunctionDeclarationStmt) ToString() string {
	body := ""
	for _, stmt := range f.Body.Statements {
		body += stmt.ToString() + "\n"
	}
	params := ""
	for _, p := range f.Parameters {
		params += p.Name.Lexeme + ", "

	}
	if len(params) > 0 {
		params = params[:len(params)-2]
	}
	return "function " + f.Name.Lexeme + "(" + params + ") " + "\n" + body
}

func (f FunctionDeclarationStmt) GetSourceLocation() interfaces.SourceLocation {
	return f.Name.SourceLocation
}
