package compiler

import (
	"github.com/Kolterdyx/mcbasic/internal/expressions"
	"github.com/Kolterdyx/mcbasic/internal/interfaces"
	"github.com/Kolterdyx/mcbasic/internal/parser"
	"github.com/Kolterdyx/mcbasic/internal/statements"
	"github.com/Kolterdyx/mcbasic/internal/visitors/compiler/ops"
	cp "github.com/otiai10/copy"
	log "github.com/sirupsen/logrus"
	"os"
	"path/filepath"
)

type Compiler struct {
	Config       interfaces.ProjectConfig
	Namespace    string
	DatapackRoot string

	functionsPath string
	tagsPath      string

	currentFunction statements.FunctionDeclarationStmt

	// functionArgs is a map of function names to their parameter names
	functionArgs map[string][]string

	opHandler ops.Op

	expressions.ExprVisitor
	statements.StmtVisitor
}

func (c *Compiler) Compile(program parser.Program) {
	err := c.createDirectoryTree()
	if err != nil {
		log.Fatalln(err)
	}
	c.createPackMeta()
	c.functionArgs = make(map[string][]string)
	for _, function := range program.Functions {
		c.functionArgs[function.Name.Lexeme] = make([]string, 0)
		for _, parameter := range function.Parameters {
			c.functionArgs[function.Name.Lexeme] = append(c.functionArgs[function.Name.Lexeme], parameter.Lexeme)
		}
	}
	// The opHandler is used to generate commands
	c.opHandler = ops.Op{Namespace: c.Namespace}
	// Traverse the AST to generate the functions
	for _, f := range program.Functions {
		f.Accept(c)
	}
	// Built-in functions are created after the user-defined functions to avoid overwriting them
	c.createBuiltinFunctions()
	err = cp.Copy(c.DatapackRoot, "/home/kolterdyx/.minecraft/saves/Test/datapacks/"+c.Config.Project.Name)
	if err != nil {
		log.Fatalln(err)
	}
}

func (c *Compiler) createDirectoryTree() error {
	c.Namespace = c.Config.Project.Namespace
	c.DatapackRoot, _ = filepath.Abs(c.Config.Project.Name)
	log.Infof("Compiling to %s\n", c.DatapackRoot)
	c.functionsPath = c.DatapackRoot + "/data/" + c.Namespace + "/functions"
	c.tagsPath = c.DatapackRoot + "/data/minecraft/tags"

	err := os.MkdirAll(c.functionsPath, 0755)
	err = os.MkdirAll(c.tagsPath, 0755)
	err = os.MkdirAll(c.DatapackRoot+"/data/"+c.Namespace+"/functions/ifs", 0755)
	return err
}

func (c *Compiler) createPackMeta() {
	packMcmeta := `{
	"pack": {
		"description": "Generated by mcbasic",
		"pack_format": 26
	}
}`
	err := os.WriteFile(c.DatapackRoot+"/pack.mcmeta", []byte(packMcmeta), 0644)
	if err != nil {
		log.Fatalln(err)
	}
}

func (c *Compiler) createBuiltinFunctions() {
	c.createFunction(
		"__print__",
		`$tellraw @a {"text":"$(text)"}`,
	)
}

func (c *Compiler) createFunction(name string, source string) {
	filename := name + ".mcfunction"
	err := os.WriteFile(c.functionsPath+"/"+filename, []byte(source), 0644)
	if err != nil {
		log.Fatalln(err)
	}
}
