package statements

import (
	"github.com/Kolterdyx/mcbasic/internal/interfaces"
	"github.com/Kolterdyx/mcbasic/internal/types"
)

type FunctionDeclarationStmt struct {
	Stmt

	Name          string
	Path          string
	Parameters    []interfaces.TypedIdentifier
	ReturnType    types.ValueType
	Body          BlockStmt
	Autogenerated bool
}

func (f FunctionDeclarationStmt) Accept(visitor StmtVisitor) interfaces.IRCode {
	return visitor.VisitFunctionDeclaration(f)
}

func (f FunctionDeclarationStmt) StmtType() StmtType {
	return FunctionDeclarationStmtType
}

func (f FunctionDeclarationStmt) HasArg(arg string) bool {
	for _, p := range f.Parameters {
		if p.Name == arg {
			return true
		}
	}
	return false
}

func (f FunctionDeclarationStmt) ToString() string {
	body := ""
	for _, stmt := range f.Body.Statements {
		body += stmt.ToString() + "\n"
	}
	params := ""
	for _, p := range f.Parameters {
		params += p.Name + " " + p.Type.ToString() + ", "

	}
	if len(params) > 0 {
		params = params[:len(params)-2]
	}
	return "function " + f.Name + "(" + params + ") -> " + f.ReturnType.ToString() + "\n" + body
}
